#!/usr/bin/env python
#
# Script to help manage credentials in gnome-keyring.

from contextlib import closing
from functools import wraps
import getpass
import hashlib
import hmac
from itertools import starmap
from operator import itemgetter, xor
import optparse
import os
import re
import time
import secretstorage
from struct import Struct
import sys

class Formatter(optparse.IndentedHelpFormatter):
  def format_description(self, description):
    return description

class Keyring(object):
  def __init__(self, connection, keyring='login', encoding='utf8'):
    self.collection = secretstorage.get_collection_by_alias(connection, keyring)
    self.encoding = encoding

  def items(self):
    return sorted(self.collection.get_all_items(), key=lambda i: i.get_label())

  def item(self, attrs):
    items = list(self.collection.search_items(attrs))
    if items:
      return items[0]

  def get(self, key, full=False, smtp=False, hash_=None, salt=False, pbkdf2=False):
    attrs = {'key': key}
    if smtp:
      user, server = key.rsplit('@', 1)
      attrs = {'user': user, 'server': server, 'protocol': 'smtp'}

    item = self.item(attrs)
    while item:
      attributes = item.get_attributes()
      if 'link' not in attributes:
        break

      item = self.item({'key': attributes['link']})

    if not item:
      raise LookupError()

    secret = item.get_secret()

    if pbkdf2:
      secret = pbkdf2_hex(
        secret,
        key if salt else '',
        hashfunc=getattr(hashlib, hash_) if hash_ else None,
      )
    elif hash_ is not None:
      if salt:
        secret = '%s{%s}' % (secret, key)

      if hash_ in ('b64', 'base64'):
        secret = secret.encode('base64').strip('\n').strip('=')
      else:
        method = getattr(hashlib, hash_)()
        method.update(secret)
        secret = method.hexdigest()
    else:
      secret = secret.decode(self.encoding)

    if full:
      return Result(secret=secret, **item.get_attributes())

    return secret

  def set(self, key, secret, smtp=False, **kwargs):
    attrs = {'key': key}
    if smtp:
      user, server = key.rsplit('@', 1)
      attrs = {'user': user, 'server': server, 'protocol': 'smtp'}

    attrs.update(kwargs)

    self.collection.create_item(key, attrs, secret, replace=True)

  def delete(self, key, smtp=False):
    attrs = {'key': key}
    if smtp:
      user, server = key.rsplit('@', 1)
      attrs = {'user': user, 'server': server, 'protocol': 'smtp'}

    for item in self.collection.search_items(attrs):
      item.delete()

  def link(self, source, *targets):
    item = self.item({'key': source})
    if not item:
      raise LookupError()

    for target in targets:
      attrs = {'key': target, 'link': source}
      self.collection.create_item(target, attrs, b'', replace=True)

  def find(self, pattern):
    results = []
    pattern = re.compile(pattern)
    for item in self.collection.get_all_items():
      name = item.get_label()
      if pattern.search(name):
        results.append(name)

    return results

class Result(dict):
  def __getattr__(self, attr):
    try:
      return self[attr]
    # convert KeyError to an AttributeError so that things like this work:
    #   getattr(d, 'foo', None)
    except KeyError as ke:
      raise AttributeError(*ke.args)

# pbkdf2 taken from https://github.com/mitsuhiko/python-pbkdf2
# Copied inline to
# a) alleviate the need to install an external library
# b) guard against the implementation changing resulting in different output,
#    rendering uses of the previous output invalid.
_pack_int = Struct('>I').pack

def pbkdf2_hex(data, salt, iterations=1000, keylen=32, hashfunc=None):
  '''
  Like :func:`pbkdf2_bin` but returns a hex encoded string.
  '''
  result =  pbkdf2_bin(data, salt, iterations, keylen, hashfunc)
  return result.hex()

def pbkdf2_bin(data, salt, iterations=1000, keylen=32, hashfunc=None):
  '''
  Returns a binary digest for the PBKDF2 hash algorithm of `data`
  with the given `salt`.  It iterates `iterations` time and produces a
  key of `keylen` bytes.  By default SHA-1 is used as hash function,
  a different hashlib `hashfunc` can be provided.
  '''
  salt = salt.encode('utf8')
  hashfunc = hashfunc or hashlib.sha1
  mac = hmac.new(data, None, hashfunc)
  def _pseudorandom(x, mac=mac):
    h = mac.copy()
    h.update(x)
    return list(h.digest())
  buf = []
  for block in range(1, -(-keylen // mac.digest_size) + 1):
    rv = u = _pseudorandom(salt + _pack_int(block))
    for i in range(iterations - 1):
      u = _pseudorandom(bytes(u))
      rv = starmap(xor, zip(rv, u))
    buf.extend(rv)
  return bytes(buf)[:keylen]

def output(func):
  def wrapper(options, *args, **kwargs):
    result = None
    try:
      result = func(options, *args, **kwargs)
      if result:
        if options.tempfile:
          _tempfile(options.tempfile, result)

        if options.clipboard:
          _clipboard(result)

        if not options.tempfile and not options.clipboard:
          print(result)
    finally:
      if not result:
        if options.clipboard:
          _clipboard('')

  return wraps(func)(wrapper)

def main(connection):
  parser = optparse.OptionParser()
  parser.add_option(
    '-k', '--keyring', dest='keyring', default='login',
    help='the keyring to use (default: login)')
  parser.add_option(
    '--smtp', action='store_true', dest='smtp',
    help='when used with the get, set, or delete commands, use the msmtp format')
  parser.add_option(
    '--hash', dest='hash',
    help='run the password through the specified hash before outputting it')
  parser.add_option(
    '--salt', action='store_true', dest='salt',
    help='combined with --hash, the key will be used as a salt')
  parser.add_option(
    '--pbkdf2', action='store_true', dest='pbkdf2',
    help='use pbkdf2 with optional --hash and --salt to hash the password for output')
  parser.add_option(
    '-t', '--tempfile', dest='tempfile',
    help='write get/password/username to a tempfile (deleted 1s after creation)')
  parser.add_option(
    '-c', '--clipboard', action='store_true', dest='clipboard',
    help='write get/password/username to a clipboard ' \
         '(cleared 10s after being set). Requires xclip')
  parser.add_option(
    '-p', '--paste', action='store_true', dest='paste',
    help='when used with \'prompt\', paste the result password into ' \
         'the currently focused field. Requires xdotool')
  parser.add_option(
    '--2factor', action='store_true', dest='twoFactor',
    help='indicates that the key to set uses two factor authentication. ' \
         'This indicator is currently only used by the \'prompt\' command ' \
         'where a subsiquent dialog will prompt you to enter your temp code ' \
         'and that value will be appended to your password. This feature ' \
         'is probably only useful for a small number of sites.')

  parser.set_usage('Usage: keyring [options] <command> [command args]')
  parser.set_description(
    'Commands:\n'
    '  list\n'
    '    list all stored keys\n'
    '  set [--2factor] [--smtp] [<key>]\n'
    '    set a key\n'
    '    when --smtp is supplied set a smtp password (msmtp format)\n'
    '  get/password [-c/--clipboard] [--smtp] [--hash [--salt]] [--pbkdf2] <key>\n'
    '    get the password for the given key\n'
    '  prompt [-p/--paste]\n'
    '    opens a gui prompt to get the password for a key.\n'
    '  delete [--smtp] <key>\n'
    '    delete the entry for the given key\n'
    '  username <domain>\n'
    '    get the username for the given domain\n'
    '  link <src_key> <dest_key> [<dest_key> ...]\n'
    '    link one or more keys together\n'
    '      Note that this is a feature unique to this script and\n'
    '      won\'t be supported by other programs reading directly\n'
    '      from gnome-keyring.'
  )
  parser.formatter = Formatter()

  (options, args) = parser.parse_args()

  if not len(args):
    parser.print_help()
    sys.exit(1)

  valid_args = {
    'list': 0,
    'prompt': 0,
    'set': lambda a: 0 <= a <= 1,
    'delete': lambda a: a >= 1,
    'username': lambda a: a >= 1,
    'password': lambda a: a >= 1,
    'get': lambda a: a >= 1,
    'link': lambda a: a >= 2,
  }
  valid = valid_args.get(args[0])
  if not callable(valid):
    num = valid
    valid = lambda a: a == num
  if not valid(len(args) - 1):
    parser.print_help()
    sys.exit(1)

  command = args[0]

  keyring = Keyring(connection, options.keyring)

  if command == 'list':
    for item in keyring.items():
      name = item.get_label()
      attributes = item.get_attributes()
      if 'link' in attributes:
        name = '%s -> %s' % (name, attributes['link'])
      print(name)

  elif command == 'get' or command == 'password':
    try:
      _get_password(options, keyring, *args[1:])
    except LookupError:
      sys.stderr.write('error: No match found.\n')
      sys.exit(1)

  elif command == 'prompt':
    _prompt_key(options, keyring)

  elif command == 'set':
    key = args[1] if len(args) > 1 else _get_input('key: ')
    attrs = {'key': key}

    if options.smtp:
      user = args[1] if len(args) > 1 else _get_input('user (user@example.com): ')
      server = _get_input('server (smtp.example.com): ')
      key = '%s@%s' % (user, server)

      attrs = {'user': user, 'server': server, 'protocol': 'smtp'}

    existing = keyring.item(attrs)
    if existing:
      _confirm("An entry for '%s' already exists. Overwrite? (y/n) " % key)

    password = _get_input(
      'password: ', password=True, allow_empty=options.twoFactor)
    print('')

    attrs = {}
    if options.twoFactor and not options.smtp:
      attrs['2factor'] = 'true'
    keyring.set(key, password, smtp=options.smtp, **attrs)

  elif command == 'delete':
    try:
      for key in args[1:]:
        keyring.delete(key, smtp=options.smtp)
    except LookupError:
      sys.stderr.write('error: No match found for %s\n' % key)
      sys.exit(1)

  elif command == 'link':
    try:
      keys = args[1:]
      keyring.link(*keys)
    except LookupError:
      sys.stderr.write('error: No match found for %s\n' % keys[0])
      sys.exit(1)

  elif command == 'username':
    try:
      _get_username(options, keyring, args[1])
    except LookupError:
      sys.stderr.write('error: No match found.\n')
      sys.exit(1)

@output
def _get_password(options, keyring, *keys):
  error = None
  for key in keys:
    return keyring.get(
      key,
      smtp=options.smtp,
      hash_=options.hash,
      salt=options.salt,
      pbkdf2=options.pbkdf2,
    )

@output
def _get_username(options, keyring, key):
  results = keyring.find('.*@%s$' % key)
  if results:
    results = set([r.rsplit('@', 1)[0] for r in results])
  else:
    results = keyring.find('^%s$' % key)

  if not results:
    raise LookupError()

  return '\n'.join(results)

def _prompt_key(options, keyring):
  import gi
  gi.require_version('Gtk', '3.0')
  from gi.repository import Gtk, Gdk

  class Window(Gtk.Window):

    def display(self):
      self.show_all()
      self.connect('destroy', Gtk.main_quit)
      Gtk.main()

  class MessageWindow(Window):
    def __init__(self, message):
      Gtk.Window.__init__(self, title='Keyring')
      self.set_modal(True)
      self.set_type_hint(Gdk.WindowTypeHint.DIALOG)
      self.set_default_size(250, 50)
      self.set_position(Gtk.WindowPosition.CENTER)

      box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=4)
      self.add(box)

      label = Gtk.Label()
      label.set_markup('<span size="10000">%s</span>' % message)
      label.set_margin_top(10)
      box.add(label)

      button = Gtk.Button(label='Ok')
      button.connect('clicked', lambda w: self.destroy())
      button.set_margin_top(10)
      button.set_margin_bottom(10)
      button.set_margin_start(50)
      button.set_margin_end(50)
      box.add(button)

  class PromptWindow(Window):
    def __init__(self, prompt):
      self.result = ''

      Gtk.Window.__init__(self, title='Keyring')
      self.set_modal(True)
      self.set_type_hint(Gdk.WindowTypeHint.DIALOG)
      self.set_default_size(350, 100)
      self.set_position(Gtk.WindowPosition.CENTER)

      box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=4)
      self.add(box)

      label = Gtk.Label()
      label.set_markup('<span size="10000">%s</span>' % prompt)
      label.set_margin_top(10)
      box.add(label)

      entry = Gtk.Entry()
      entry.set_width_chars(36)
      entry.set_margin_top(10)
      entry.set_margin_bottom(10)
      entry.set_margin_start(20)
      entry.set_margin_end(20)
      entry.connect('activate', self.submit)
      box.add(entry)

    def submit(self, entry):
      self.result = entry.get_text()
      self.destroy()

  window = PromptWindow('Please enter key to retrieve the password for:')
  window.display()

  key = window.result
  if key:
    try:
      result = keyring.get(
        key, full=True,
        hash_=options.hash, salt=options.salt, pbkdf2=options.pbkdf2)
    except LookupError:
      window = MessageWindow('Unable to find the key: ' + key)
      window.display()
    else:
      secret = result.secret
      if getattr(result, '2factor', False):
        window = PromptWindow('Please enter your temp 2factor auth code:')
        window.display()
        secret += window.result

      _clipboard(secret, paste=options.paste)

def _get_input(prompt, password=False, allow_empty=False):
  if password:
    value = getpass.getpass(prompt)
  else:
    value = input(prompt)

  if not value and not allow_empty:
    sys.stderr.write('No value supplied, aborting.')
    sys.exit(0)

  return value

def _confirm(prompt):
  response = input(prompt)
  if response != 'y':
    sys.exit(0)

def _tempfile(tempfile, content):
  with open(tempfile, 'w') as temp:
    temp.write(content)
  _cleanup(_cleanup_tempfile, 1, tempfile)

def _cleanup_tempfile(timeout, tempfile):
  time.sleep(timeout)
  os.unlink(tempfile)

def _clipboard(content, paste=False):
  os.popen('xclip -selection clipboard', 'w').write(content)
  if content:
    if paste:
      _cleanup(_paste_clipboard, .2)
    else:
      _cleanup(_cleanup_clipboard, 10)

def _paste_clipboard(timeout):
  os.popen('xdotool key ctrl+shift+v')
  _cleanup_clipboard(timeout)

def _cleanup_clipboard(timeout):
  time.sleep(timeout)
  os.popen('xclip -selection clipboard', 'w').write('')

def _cleanup(func, *args):
  try:
    pid = os.fork()
    if pid > 0:
      sys.exit(0)
  except OSError as e:
    out('Failed to fork cleanup: %s' % e, file=sys.stderr)
    sys.exit(1)

  # decouple from parent
  os.chdir('/')
  os.setsid()
  os.umask(0)

  try:
    pid = os.fork()
    if pid > 0:
      out('Cleanup fork pid: %s' % pid, file=sys.stderr)
      sys.exit(0)
  except OSError as e:
    out('Failed to fork cleanup: %s' % e, file=sys.stderr)
    sys.exit(1)

  func(*args)

def out(string, **kwargs):
  file = kwargs.pop('file', sys.stdout)
  file.write('%s\n' % string)

def get_password(key, keyring='login', encoding='utf8'):
  with closing(secretstorage.dbus_init()) as connection:
    keyring = Keyring(connection, keyring=keyring, encoding=encoding)
    return keyring.get(key)

if __name__ == '__main__':
  try:
    with closing(secretstorage.dbus_init()) as connection:
      main(connection)
  except KeyboardInterrupt:
    print('')
