#!/usr/bin/env python2
#
# Script to help manage credentials in gnome-keyring.

from functools import wraps
import getpass
import gnomekeyring
import hashlib
import hmac
from itertools import izip, starmap
from operator import xor
import optparse
import os
import re
import time
from struct import Struct
import sys

class Formatter(optparse.IndentedHelpFormatter):
  def format_description(self, description):
    return description

class Keyring(object):
  def __init__(self, keyring='login'):
    self.keyring = keyring

  def keys(self):
    keys = []
    for item in gnomekeyring.list_item_ids_sync(self.keyring):
      info = gnomekeyring.item_get_info_sync(self.keyring, item)
      keys.append(info.get_display_name())
    return keys

  def get(self, key, full=False, smtp=False, hash_=None, salt=False, pbkdf2=False):
    attrs = {'key': key}
    if smtp:
      user, server = key.rsplit('@', 1)
      attrs = {'user': user, 'server': server, 'protocol': 'smtp'}

    items = gnomekeyring.find_items_sync(
      gnomekeyring.ITEM_NETWORK_PASSWORD, attrs
    )
    while 'link' in items[0].attributes:
      source = items[0].attributes['link']
      items = gnomekeyring.find_items_sync(
        gnomekeyring.ITEM_NETWORK_PASSWORD, {'key': source}
      )

    secret = items[0].secret

    if pbkdf2:
      secret = pbkdf2_hex(
        secret,
        key if salt else '',
        hashfunc=getattr(hashlib, hash_) if hash_ else None,
      )
    elif hash_ is not None:
      if salt:
        secret = '%s{%s}' % (secret, key)

      if hash_ in ('b64', 'base64'):
        secret = secret.encode('base64').strip('\n').strip('=')
      else:
        method = getattr(hashlib, hash_)()
        method.update(secret)
        secret = method.hexdigest()

    if full:
      return Result(secret=secret, **items[0].attributes)

    return secret

  def set(self, key, value, smtp=False, **kwargs):
    attrs = {'key': key}
    if smtp:
      user, server = key.rsplit('@', 1)
      attrs = {'user': user, 'server': server, 'protocol': 'smtp'}

    attrs.update(kwargs)

    gnomekeyring.item_create_sync(
      self.keyring, gnomekeyring.ITEM_NETWORK_PASSWORD,
      key, attrs, value, True
    )

  def delete(self, key):
    items = gnomekeyring.find_items_sync(
      gnomekeyring.ITEM_NETWORK_PASSWORD, {'key': key}
    )
    if items:
      gnomekeyring.item_delete_sync(self.keyring, items[0].item_id)

  def link(self, source, *targets):
    gnomekeyring.find_items_sync(
      gnomekeyring.ITEM_NETWORK_PASSWORD, {'key': source}
    )
    for target in targets:
      attrs = {'key': target, 'link': source}
      gnomekeyring.item_create_sync(
        self.keyring, gnomekeyring.ITEM_NETWORK_PASSWORD,
        target, attrs, '', True
      )

  def find(self, pattern):
    if isinstance(pattern, basestring):
      pattern = re.compile(pattern)

    results = []
    for item in gnomekeyring.list_item_ids_sync(self.keyring):
      info = gnomekeyring.item_get_info_sync(self.keyring, item)
      name = info.get_display_name()
      if pattern.search(name):
        results.append(name)

    return results

class Result(dict):
  def __getattr__(self, attr):
    try:
      return self[attr]
    # convert KeyError to an AttributeError so that things like this work:
    #   getattr(d, 'foo', None)
    except KeyError as ke:
      raise AttributeError(*ke.args)

# pbkdf2 taken from https://github.com/mitsuhiko/python-pbkdf2
# Copied inline to
# a) alleviate the need to install an external library
# b) guard against the implementation changing resulting in different output,
#    rendering uses of the previous output invalid.
_pack_int = Struct('>I').pack

def pbkdf2_hex(data, salt, iterations=1000, keylen=32, hashfunc=None):
  """Like :func:`pbkdf2_bin` but returns a hex encoded string."""
  return pbkdf2_bin(data, salt, iterations, keylen, hashfunc).encode('hex')

def pbkdf2_bin(data, salt, iterations=1000, keylen=32, hashfunc=None):
  """Returns a binary digest for the PBKDF2 hash algorithm of `data`
  with the given `salt`.  It iterates `iterations` time and produces a
  key of `keylen` bytes.  By default SHA-1 is used as hash function,
  a different hashlib `hashfunc` can be provided.
  """
  hashfunc = hashfunc or hashlib.sha1
  mac = hmac.new(data, None, hashfunc)
  def _pseudorandom(x, mac=mac):
    h = mac.copy()
    h.update(x)
    return map(ord, h.digest())
  buf = []
  for block in xrange(1, -(-keylen // mac.digest_size) + 1):
    rv = u = _pseudorandom(salt + _pack_int(block))
    for i in xrange(iterations - 1):
      u = _pseudorandom(''.join(map(chr, u)))
      rv = starmap(xor, izip(rv, u))
    buf.extend(rv)
  return ''.join(map(chr, buf))[:keylen]

def output(func):
  def wrapper(options, *args, **kwargs):
    result = None
    try:
      result = func(options, *args, **kwargs)

      if options.tempfile:
        _tempfile(options.tempfile, result)

      if options.clipboard:
        _clipboard(result)

      if not options.tempfile and not options.clipboard:
        print(result)
    finally:
      if not result:
        if options.clipboard:
          _clipboard('')

  return wraps(func)(wrapper)

def main():
  parser = optparse.OptionParser()
  parser.add_option(
    "-k", "--keyring", dest="keyring", default="login",
    help="the keyring to use (default: login)")
  parser.add_option(
    "--hash", dest="hash",
    help="run the password through the specified hash before outputting it")
  parser.add_option(
    "--salt", action="store_true", dest="salt",
    help="combined with --hash, the key will be used as a salt")
  parser.add_option(
    "--pbkdf2", action="store_true", dest="pbkdf2",
    help="use pbkdf2 with optional --hash and --salt to hash the password for output")
  parser.add_option(
    "-t", "--tempfile", dest="tempfile",
    help="write get/password/username to a tempfile (deleted 1s after creation)")
  parser.add_option(
    "-c", "--clipboard", action="store_true", dest="clipboard",
    help="write get/password/username to a clipboard " \
         "(cleared 10s after being set). Requires xclip")
  parser.add_option(
    "-p", "--paste", action="store_true", dest="paste",
    help="when used with 'prompt', paste the result password into " \
         "the currently focused field. Requires xdotool")
  parser.add_option(
    "--2factor", action="store_true", dest="twoFactor",
    help="indicates that the key to set uses two factor authentication. " \
         "This indicator is currently only used by the 'prompt' command " \
         "where a subsiquent dialog will prompt you to enter your temp code " \
         "and that value will be appended to your password. This feature " \
         "is probably only useful for a small number of sites.")

  parser.set_usage('Usage: keyring [options] <command> [command args]')
  parser.set_description(
    'Commands:\n'
    '  list\n'
    '    list all stored keys\n'
    '  set [--2factor] [<key>]\n'
    '    set a key\n'
    '  get/password [-c/--clipboard] [--hash [--salt]] [--pbkdf2] <key>\n'
    '    get the password for the given key\n'
    '  prompt [-p/--paste]\n'
    '    opens a gui prompt to get the password for a key.\n'
    '  delete <key>\n'
    '    delete the entry for the given key\n'
    '  username <domain>\n'
    '    get the username for the given domain\n'
    '  smtp [<key>]\n'
    '    set a smtp password (msmtp format)\n'
    '  link <src_key> <dest_key> [<dest_key> ...]\n'
    '    link one or more keys together\n'
    '      Note that this is a feature unique to this script and\n'
    '      won\'t be supported by other programs reading directly\n'
    '      from gnome-keyring.'
  )
  parser.formatter = Formatter()

  (options, args) = parser.parse_args()

  if not len(args):
    parser.print_help()
    sys.exit(1)

  valid_args = {
    'list': 0,
    'prompt': 0,
    'set': lambda a: 0 <= a <= 1,
    'smtp': lambda a: 0 <= a <= 1,
    'delete': lambda a: a >= 1,
    'username': lambda a: a >= 1,
    'password': lambda a: a >= 1,
    'get': lambda a: a >= 1,
    'link': lambda a: a >= 2,
  }
  valid = valid_args.get(args[0])
  if not callable(valid):
    num = valid
    valid = lambda a: a == num
  if not valid(len(args) - 1):
    parser.print_help()
    sys.exit(1)

  command = args[0]

  keyring = Keyring(options.keyring)

  if command == 'list':
    for key in sorted(keyring.keys()):
      name = key
      attrs = {'key': key}
      try:
        items = gnomekeyring.find_items_sync(
          gnomekeyring.ITEM_NETWORK_PASSWORD, attrs
        )
        if 'link' in items[0].attributes:
          name = '%s -> %s' % (key, items[0].attributes['link'])
      except gnomekeyring.NoMatchError:
        # handle smtp keys
        try:
            user, server = key.rsplit('@', 1)
        except ValueError:
            continue
        attrs = {'user': user, 'server': server, 'protocol': 'smtp'}
        items = gnomekeyring.find_items_sync(
          gnomekeyring.ITEM_NETWORK_PASSWORD, attrs
        )
        if 'link' in items[0].attributes:
          name = '%s -> %s' % (key, items[0].attributes['link'])

      print(name)

  elif command == 'get' or command == 'password':
    try:
      _get_password(options, keyring, *args[1:])
    except gnomekeyring.NoMatchError:
      sys.stderr.write('error: No match found.\n')
      sys.exit(1)

  elif command == 'prompt':
    _prompt_key(options, keyring)

  elif command == 'set':
    key = args[1] if len(args) > 1 else _get_input('key: ')

    attrs = {'key': key}
    try:
      gnomekeyring.find_items_sync(
        gnomekeyring.ITEM_NETWORK_PASSWORD, attrs
      )
      _confirm("The key '%s' already exists. Overwrite? (y/n) " % key)
    except gnomekeyring.NoMatchError:
      pass

    password = _get_input('password: ', password=True)
    print('')
    attrs = {}
    if options.twoFactor:
      attrs['2factor'] = True
    keyring.set(key, password, **attrs)

  elif command == 'delete':
    try:
      for key in args[1:]:
        keyring.delete(key)
    except gnomekeyring.NoMatchError:
      sys.stderr.write('error: No match found for %s\n' % key)
      sys.exit(1)

  elif command == 'link':
    try:
      keys = args[1:]
      keyring.link(*keys)
    except gnomekeyring.NoMatchError:
      sys.stderr.write('error: No match found for %s\n' % keys[0])
      sys.exit(1)

  elif command == 'username':
    _get_username(options, keyring, *args[1:])

  elif command == 'smtp':
    user = args[1] if len(args) > 1 else _get_input('user (user@example.com): ')
    server = _get_input('server (smtp.example.com): ')
    key = '%s@%s' % (user, server)

    attrs = {'user': user, 'server': server, 'protocol': 'smtp'}
    try:
      gnomekeyring.find_items_sync(
        gnomekeyring.ITEM_NETWORK_PASSWORD, attrs
      )
      _confirm("An entry for '%s' already exists. Overwrite? (y/n) " % key)
    except gnomekeyring.NoMatchError:
      pass

    password = _get_input('password: ', password=True)
    print('')
    keyring.set(key, password, smtp=True)

@output
def _get_password(options, keyring, *keys):
  error = None
  for key in keys:
    try:
      return keyring.get(
        key, hash_=options.hash, salt=options.salt, pbkdf2=options.pbkdf2)
    except gnomekeyring.NoMatchError as nme:
      error = nme

  if error:
    raise error

@output
def _get_username(options, keyring, *keys):
  for key in keys:
    results = keyring.find('.*@%s$' % key)
    if results:
      results = set([r.rsplit('@', 1)[0] for r in results])
    else:
      results = keyring.find('^%s$' % key)

    if results:
      return '\n'.join(results)

  out('error: No match found.', file=sys.stderr)

def _prompt_key(options, keyring):
  import gtk
  dialog = gtk.MessageDialog(
    None,
    gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
    gtk.MESSAGE_OTHER,
    gtk.BUTTONS_OK,
    None)
  dialog.set_position(gtk.WIN_POS_CENTER)
  dialog.set_markup('Please enter key to retrieve the password for:')
  entry = gtk.Entry()
  entry.connect(
    'activate',
    lambda entry, dialog, response: dialog.response(response),
    dialog,
    gtk.RESPONSE_OK)
  hbox = gtk.HBox()
  hbox.pack_start(gtk.Label('Name:'), False, 5, 5)
  hbox.pack_end(entry)
  dialog.vbox.pack_end(hbox, True, True, 0)
  dialog.show_all()
  dialog.run()
  key = entry.get_text()
  dialog.destroy()

  # dialog won't hide without this (gotta love UI code)
  while gtk.events_pending():
    gtk.main_iteration(False)

  if key:
    try:
      result = keyring.get(
        key, full=True,
        hash_=options.hash, salt=options.salt, pbkdf2=options.pbkdf2)
    except gnomekeyring.NoMatchError:
      dialog = gtk.MessageDialog(
        None,
        gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
        gtk.MESSAGE_ERROR,
        gtk.BUTTONS_OK,
        None)
      dialog.set_position(gtk.WIN_POS_CENTER)
      dialog.set_markup('Unable to find the key: ' + key)
      dialog.show_all()
      dialog.run()
    else:
      secret = result.secret
      if getattr(result, '2factor', False):
        dialog = gtk.MessageDialog(
          None,
          gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
          gtk.MESSAGE_OTHER,
          gtk.BUTTONS_OK,
          None)
        dialog.set_position(gtk.WIN_POS_CENTER)
        dialog.set_markup('Please enter your temp 2factor auth code:')
        entry = gtk.Entry()
        entry.connect(
          'activate',
          lambda entry, dialog, response: dialog.response(response),
          dialog,
          gtk.RESPONSE_OK)
        hbox = gtk.HBox()
        hbox.pack_start(gtk.Label('Code:'), False, 5, 5)
        hbox.pack_end(entry)
        dialog.vbox.pack_end(hbox, True, True, 0)
        dialog.show_all()
        dialog.run()
        code = entry.get_text()
        dialog.destroy()
        while gtk.events_pending():
          gtk.main_iteration(False)
        secret += code

      _clipboard(secret, paste=options.paste)

def _get_input(prompt, password=False):
  if password:
    value = getpass.getpass(prompt)
  else:
    value = raw_input(prompt)

  if not value:
    sys.stderr.write('No value supplied, aborting.')
    sys.exit(0)

  return value

def _confirm(prompt):
  response = raw_input(prompt)
  if response != 'y':
    sys.exit(0)

def _tempfile(tempfile, content):
  with open(tempfile, 'w') as temp:
    temp.write(content)
  _cleanup(_cleanup_tempfile, 1, tempfile)

def _cleanup_tempfile(timeout, tempfile):
  time.sleep(timeout)
  os.unlink(tempfile)

def _clipboard(content, paste=False):
  os.popen('xclip -selection clipboard', 'wb').write(content)
  if content:
    if paste:
      _cleanup(_paste_clipboard, .2)
    else:
      _cleanup(_cleanup_clipboard, 10)

def _paste_clipboard(timeout):
  os.popen('xdotool key ctrl+v')
  _cleanup_clipboard(timeout)

def _cleanup_clipboard(timeout):
  time.sleep(timeout)
  os.popen('xclip -selection clipboard', 'wb').write('')

def _cleanup(func, *args):
  try:
    pid = os.fork()
    if pid > 0:
      sys.exit(0)
  except OSError as e:
    out('Failed to fork cleanup: %s' % e, file=sys.stderr)
    sys.exit(1)

  # decouple from parent
  os.chdir('/')
  os.setsid()
  os.umask(0)

  try:
    pid = os.fork()
    if pid > 0:
      out('Cleanup fork pid: %s' % pid, file=sys.stderr)
      sys.exit(0)
  except OSError as e:
    out('Failed to fork cleanup: %s' % e, file=sys.stderr)
    sys.exit(1)

  func(*args)

def out(string, **kwargs):
  file = kwargs.pop('file', sys.stdout)
  file.write('%s\n' % string)

if __name__ == '__main__':
  try:
    main()
  except KeyboardInterrupt:
    print('')
